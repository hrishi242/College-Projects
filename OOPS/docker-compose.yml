version: '3.8'

services:
  # Database Services
  auth-postgres:
    image: postgres:15
    container_name: auth-postgres
    environment:
      POSTGRES_DB: authdb
      POSTGRES_USER: authuser
      POSTGRES_PASSWORD: authpass
    ports:
      - "5433:5432"
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U authuser -d authdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  blog-postgres:
    image: postgres:15
    container_name: blog-postgres
    environment:
      POSTGRES_DB: blogdb
      POSTGRES_USER: bloguser
      POSTGRES_PASSWORD: blogpass
    ports:
      - "5434:5432"
    volumes:
      - blog_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bloguser -d blogdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  recommendation-postgres:
    image: pgvector/pgvector:pg15
    container_name: recommendation-postgres
    environment:
      POSTGRES_DB: recommendation_db
      POSTGRES_USER: recommendation_user
      POSTGRES_PASSWORD: recommendation_pass
    ports:
      - "5435:5432"
    volumes:
      - recommendation_postgres_data:/var/lib/postgresql/data
      - ./backend/recommendation/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U recommendation_user -d recommendation_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  # Redis Service
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  # Kafka Services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - backend-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: 10s
      timeout: 20s
      retries: 5
    networks:
      - backend-network

  # Embedding Service
  embedding-service:
    build:
      context: ./backend/embeddingService
      dockerfile: Dockerfile
    container_name: embedding-service
    ports:
      - "8000:8000"
    environment:
      - MODEL_CACHE_DIR=/app/model_cache
    volumes:
      - embedding_model_cache:/app/model_cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 5 
      start_period: 300s
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    networks:
      - backend-network

  # Application Services
  auth:
    build:
      context: ./backend/auth
    container_name: auth
    ports:
      - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://auth-postgres:5432/authdb
      SPRING_DATASOURCE_USERNAME: authuser
      SPRING_DATASOURCE_PASSWORD: authpass
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
    depends_on:
      auth-postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network

  blog:
    build:
      context: ./backend/blog
    container_name: blog
    ports:
      - "8082:8080"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://blog-postgres:5432/blogdb
      SPRING_DATASOURCE_USERNAME: bloguser
      SPRING_DATASOURCE_PASSWORD: blogpass
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    depends_on:
      kafka:
        condition: service_healthy
      blog-postgres:
        condition: service_healthy
    networks:
      - backend-network

  recommendation:
    build:
      context: ./backend/recommendation
    container_name: recommendation
    ports:
      - "8083:8080"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://recommendation-postgres:5432/recommendation_db
      SPRING_DATASOURCE_USERNAME: recommendation_user
      SPRING_DATASOURCE_PASSWORD: recommendation_pass
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      EMBEDDING_SERVICE_URL: http://embedding-service:8000
      EMBEDDING_SERVICE_ENABLED: "true"
      EMBEDDING_SERVICE_TIMEOUT: 30
    depends_on:
      recommendation-postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      embedding-service:
        condition: service_healthy
    networks:
      - backend-network

volumes:
  auth_postgres_data:
  blog_postgres_data:
  recommendation_postgres_data:
  redis_data:
  embedding_model_cache:

networks:
  backend-network:
    driver: bridge
